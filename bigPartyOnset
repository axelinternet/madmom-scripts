#!/usr/bin/env python
# encoding: utf-8
"""
CNNOnsetDetector onset detection algorithm.

"""

from __future__ import absolute_import, division, print_function

import argparse
import csv

from madmom.processors import IOProcessor, io_arguments
from madmom.audio.signal import SignalProcessor
from madmom.features import ActivationsProcessor
from madmom.features.onsets import CNNOnsetProcessor, OnsetPeakPickingProcessor
from madmom.evaluation.onsets import OnsetEvaluation # CAn this be what we need to use?

"""
Detected default arguments
Namespace(combine=0.03, delay=0.0, fps=100, 
    func=<function process_single at 0x7f9793c9c950>, 
    gain=0, infile=<_io.BufferedReader name='/home/axel/Python/madmom/sounds/BassDrumsSax_Single/B1Dr1S2phr1v2BassPick.wav'>, 
    load=False, 
    norm=False, 
    num_threads=4, 
    outfile=<_io.BufferedWriter name='<stdout>'>, 
    post_max=0.01, 
    pre_max=0.01, 
    save=False, 
    sep=None, 
    smooth=0.05, 
    threshold=0.54, 
    verbose=None)
"""
def setup_arguments():
    # define parser
    p = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter, description='''
    The CNNOnsetDetector program detects all onsets in an audio file with a
    convolutional neural network as described in:

    "Musical Onset Detection with Convolutional Neural Networks"
    Jan Schlüter and Sebastian Böck.
    Proceedings of the 6th International Workshop on Machine Learning and
    Music, 2013.

    The implementation follows as closely as possible the original one, but
    part of the signal pre-processing differs in minor aspects, so results can
    differ slightly, too.

    This program can be run in 'single' file mode to process a single audio
    file and write the detected onsets to STDOUT or the given output file.

      $ CNNOnsetDetector single INFILE [-o OUTFILE]

    If multiple audio files should be processed, the program can also be run
    in 'batch' mode to save the detected onsets to files with the given suffix.

      $ CNNOnsetDetector batch [-o OUTPUT_DIR] [-s OUTPUT_SUFFIX] FILES

    If no output directory is given, the program writes the files with the
    detected onsets to the same location as the audio files.

    The 'pickle' mode can be used to store the used parameters to be able to
    exactly reproduce experiments.

    ''')
    # input/output options
    io_arguments(p, output_suffix='.onsets.txt')
    ActivationsProcessor.add_arguments(p)
    # signal processing arguments
    SignalProcessor.add_arguments(p, norm=False, gain=0)
    # peak picking arguments
    OnsetPeakPickingProcessor.add_arguments(p, threshold=0.54, smooth=0.05)

    # parse arguments
    args = p.parse_args()
    
    # set immutable defaults
    args.fps = 100
    args.pre_max = 1. / args.fps
    args.post_max = 1. / args.fps
    return args
    
def CNNProcess(args):
    # use a CNN to predict the onsets
    CNNProc = CNNOnsetProcessor(**vars(args))
    processed_by_CNN = CNNProc(args.infile)
    peak_picker_proc = OnsetPeakPickingProcessor(**vars(args))
    detected_notes_array = peak_picker_proc.process_sequence(processed_by_CNN)
    return detected_notes_array
    
def print_results(arr):
    for i in arr:
        print(i)
    
def read_annotated_data(filename, print_mode = False):
    """
    Reading csv data and matching rows according to the filename.
    Ignoring right drum track as both left and right corresponds to the same annotaded data.
    """ 
    bassist = filename[1]
    drummer = filename[4]
    phrase = filename[10]
    version = filename[12]
    track = filename[13:-4]
    if track == "BassPick":
        track = "BassTrack"
    elif track == "SaxMic": 
        track = "SaxTrack"
    elif track == "DrL":
        track = 'DrumTrack'
    
    # Print selection
    if print_mode:
        print("## Analyzing ##")
        print("track: ", track)
        print("bassist: ", bassist)
        print("drummer: ", drummer)
        print("phrase: ", phrase)
        print("version: ", version)
    
    with open('jazzData.csv') as csvfile:
        jazz_reader = csv.reader(csvfile)
        annotated_notes = []
        for note in jazz_reader:
            if note[4:-3] == [track, bassist, drummer, phrase, version]:
                #print(note)
                annotated_notes.append(note[1])

    return annotated_notes
    
if __name__ == '__main__':
    args = setup_arguments()
    # Load annotaded data
    loaded_filename = args.infile.name.strip("BassDrumsSax_Single")[1:]
    annotated_notes = read_annotated_data(loaded_filename)
        
    # Detect notes using algorithm
    detected_notes_array = CNNProcess(args)
    
